# Primo script di R
# Utilizziamo R come una calcolatrice 
# Associamo agli oggetti a,b le operazioni di prodotto fra 2 numeri (es.)
# Si usa il simbolo di associazione "<-" per associare un numero o comunque un attributo ad un oggetto, in questo caso lo associamo alle lettere a,b

a <- 6 * 7
b <- 5 * 8

# Chiediamo a R di fare l'operazione di somma degli oggetti a,b

a + b

# R ci restituisce il risultato di somma fra a e b

# Utiliziamo R per produrre degli Arrays
# Creiamo l'oggetto "flowers" a cui attribuiamo, mediante la funzione di comando "concatenate" ["c()"] una serie di valori separati da una virgola
flowers <- c(3, 6, 8, 10, 15, 18)
# Richiamiamo l'oggetto "flowers" che R ci mostrerà nell'output
flowers
# Creiamo un altro oggetto, "insects" a cui attribuiamo allo stesso modo una serie di valori numerici
insects <- c(10, 16, 25, 42, 61, 73)
# Richiamiamo l'oggetto "insects" che R ci mostrerà nell'output
insects

# Chiediamo a R di farci il grafico di questi 2 oggetti, per questo usiamo la funzione "plot"

plot(flowers, insects)

# Cambiamo i parametri di plot 

# Andiamo a cambiare la modalità di visualizzazione dei simboli impiegati nel plot 
# Cambiamo come ci appaiono i pallini con cui vengono rappresentati i dati nel grafico
# A seconda del numero che inseriamo in "pch" cambia la modalità di visualizzazione del punto sul grafico
# Se non metto un numero il pallino compare tondo bianco vuoto, Al numero 19 di pch corrisponde, es., il pallino nero pieno, al 25 corrisponde un triangolino con la base verso l'alto, al 69 una E ecc.
plot(flowers, insects)
plot(flowers, insects, pch=19)
plot(flowers, insects, pch=25)
plot(flowers, insects, pch=69)

# Cambiamo le dimensioni dei simboli con cui vengono visualizzati i dati
# Per far prima consideriamo direttamente la funzione plot con i nseriti i dati che vogliamo visualizzare e aggingiamo la funzione "cex" che cambia la dimensione
# Se a pch associo il numero 2 le dimensioni dei pallini raddoppiano, se metto ad es. .5 dimezzano (posso impiegare il "." per indicare "0,")
plot(flowers, insects, pch=19, cex=2)
plot(flowers, insects, pch=19, cex=.5)

# Cambiamo il colore con cui vengono visualizzati i dati nell'output 
# Posso ad es. andare ad inserire la funzione "col" che ci cambia e dichiara il colore dei dati che sto rappresentando
# Per es. posso inserire "chocolate1" per andare a rappresentare pallini di colore marrone.
# Per vedere i colori a disposizione 
plot(flowers, insects, pch=19, cex=.5, col="chocolate1") # this function is cool!












#Visualizzazione in R di dati satellitari da imageRy
#hhtps://

library(terra)
library(imageRy)

#lista dei dati ritrovabili su imageRy
im.list()

#importazione dati
b2<-im.import("sentinel.dolomites.b2.tif")
b3 <- im.import("sentinel.dolomites.b3.tif") 
b4 <- im.import("sentinel.dolomites.b4.tif") 
b8 <- im.import("sentinel.dolomites.b8.tif") 

#multiframe
par(mfrow=c(2,2))
plot(b2)
plot(b3)
plot(b4)
plot(b8)

#creo immagine multispettrale (più spettri di colore)

stacksent<-c(b2,b3,b4,b8)
plot(stacksent)

#posso rifare lo stesso lavoro cambiando la scala di colore

#se volessi plottare solo il quarto elemento dello stack, la banda b8, proseguo con il comando dev.off per cancellare quanto fatto in precedenza

dev.off()

plot(stacksent[[4]])

#come si plottano l evarie bande di colore
#?
#c()

#Plottaggio bande RGB (Rosso, Verde, Blu) o (Red, Green, Blue)

#stacksent[[1]]= b2 = blue
#stacksent[[2]] = b3 = green
#stacksent[[3]] = b4 = red
#stacksent [[4]] = b8 = nir = vicino infra rosso

#composizione RGB diventa composizione 3,2,1

im.plotRGB(stacksent,r=3, g=2, b=1)

im.plotRGB(stacksent,r=4, g=2, b=1)

#es. rappresentare insieme con par le immagini una con colori naturali e una in infrarosso

par(mfrow=c(1,2))
im.plotRGB(stacksent, r=3, g=2, b=1)
im.plotRGB(stacksent, r=4, g=2, b=1)


par(mfrow=c(1,2))
im.plotRGB(stacksent, 4,3,2)


par(mfrow=c(1,3))
im.plotRGB(stacksent, 3,2,1)
im.plotRGB(stacksent, 4,2,1)
im.plotRGB(stacksent, 4,3,2)


#nir su verde
im.plotRGB(stacksent, 3,4,2)

#nir su blu
im.plotRGB(stacksent, 3,2,4)

#mulitiframe finale
#esercizio: fare un multiframe finale

par(mfrow=c(2,2))
im.plotRGB(stacksent, 3,2,1) #colori naturali
im.plotRGB(stacksent, 4,2,1) #nir su rosso
im.plotRGB(stacksent, 3,4,2) #nir su verde
im.plotRGB(stacksent, 3,2,4) #nir su blu

#correlazione per informazioni
pairs(stacksent)
#grafici mostra correlazione pixel bandaxbanda. Bu e verde molto correlati ad es. Abbiamo indice correlazione di Pearson. Va da -1 a +1.
#i valori si abbassano quando si va verso il vicino infrarosso.
b2
#se digito il nome di un oggetto mi escono tutte le sue informazioni relative


