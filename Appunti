# Primo script di R
# Utilizziamo R come una calcolatrice 
# Associamo agli oggetti a,b le operazioni di prodotto fra 2 numeri (es.)
# Si usa il simbolo di associazione "<-" per associare un numero o comunque un attributo ad un oggetto, in questo caso lo associamo alle lettere a,b

a <- 6 * 7
b <- 5 * 8

# Chiediamo a R di fare l'operazione di somma degli oggetti a,b

a + b

# R ci restituisce il risultato di somma fra a e b

# Utiliziamo R per produrre degli Arrays
# Creiamo l'oggetto "flowers" a cui attribuiamo, mediante la funzione di comando "concatenate" ["c()"] una serie di valori separati da una virgola
flowers <- c(3, 6, 8, 10, 15, 18)
# Richiamiamo l'oggetto "flowers" che R ci mostrerà nell'output
flowers
# Creiamo un altro oggetto, "insects" a cui attribuiamo allo stesso modo una serie di valori numerici
insects <- c(10, 16, 25, 42, 61, 73)
# Richiamiamo l'oggetto "insects" che R ci mostrerà nell'output
insects

# Chiediamo a R di farci il grafico di questi 2 oggetti, per questo usiamo la funzione "plot"

plot(flowers, insects)

# Cambiamo i parametri di plot 

# Andiamo a cambiare la modalità di visualizzazione dei simboli impiegati nel plot 
# Cambiamo come ci appaiono i pallini con cui vengono rappresentati i dati nel grafico
# A seconda del numero che inseriamo in "pch" cambia la modalità di visualizzazione del punto sul grafico
# Se non metto un numero il pallino compare tondo bianco vuoto, Al numero 19 di pch corrisponde, es., il pallino nero pieno, al 25 corrisponde un triangolino con la base verso l'alto, al 69 una E ecc.
plot(flowers, insects)
plot(flowers, insects, pch=19)
plot(flowers, insects, pch=25)
plot(flowers, insects, pch=69)

# Cambiamo le dimensioni dei simboli con cui vengono visualizzati i dati
# Per far prima consideriamo direttamente la funzione plot con i nseriti i dati che vogliamo visualizzare e aggingiamo la funzione "cex" che cambia la dimensione
# Se a pch associo il numero 2 le dimensioni dei pallini raddoppiano, se metto ad es. .5 dimezzano (posso impiegare il "." per indicare "0,")
plot(flowers, insects, pch=19, cex=2)
plot(flowers, insects, pch=19, cex=.5)

# Cambiamo il colore con cui vengono visualizzati i dati nell'output 
# Posso ad es. andare ad inserire la funzione "col" che ci cambia e dichiara il colore dei dati che sto rappresentando
# Per es. posso inserire "chocolate1" per andare a rappresentare pallini di colore marrone.
# Per vedere i colori a disposizione posso andare in una libreria (verificare il nome della libreria dei colori da usare e seguire)
plot(flowers, insects, pch=19, cex=.5, col="chocolate1") 



# Come installare nuovi pacchetti di R
# Cominciamo installiando il pacchetto "terra" con il seguente comando

install.packages("terra")

# Proseguiamo installando il pacchetto "devtools" con il seguente comando

install.packages("devtools")

# Andiamo a richiamare nella libreria il pacchetto "terra" appena installato con il comando "library ()"

library(terra)

# Posso in alternativa usare anche il comando "require()"
# Richiamo in libreria anche devtools

library(devtools)

# Come installare il pacchetto imageRy da GitHub

# Uso una funzione di devtools:
# Mi occorre usare il comando indicato come segue: install_github("ducciorocchini/imageRy")

install_github("ducciorocchini/imageRy") # Così facendo installo tale pacchetto dal GitHub del prof. Duccio Rocchini 

# Con il comando già visto, "library()" indicando di voler richiamare il pacchetto imageRy, richiamo tale pacchetto

library(imageRy)


# Visualizzare dati satellitari in R da imageRy
# Riportiamo il link di riferimento da cui prendiamo le informazioni che ci servono
# https://sentinels.copernicus.eu/web/sentinel/user-guides/sentinel-2-msi/resolutions/spatial

# Richiamo col comando library i pacchetti terra e imageRy

library(terra)
library(imageRy)

# Richiedo di vedere la lista dei dati disponibili in imageRy impiegando il comando "im.list()"

im.list()

# Come si importano i dati
# Do all'oggetto, es., sentinel.dolomites.b2.tif, il nome di b2 associato alla banda di colore relativa

b2 <- im.import("sentinel.dolomites.b2.tif")

# Come si plottano i dati in questo caso
# Definisco una banda di colori da impiegare per la rappresentazione del film tif che ho scelto di visualizzare
# In questo caso ho scelto un file tif relativo alla catena montuosa dolomitica delle Tofane in Veneto in zona Cortina d'Ampezzo
# Scelgo di definire una banda di colore dandogli un nome esemplificativo, in questo caso scelgo "clg" per brevità
# Utilizzo il comando colorRamPalette insieme a c(), indico anche fuori da questa funzione di associazione, fra altre due parentesi tonde il numero di sfumature che voglio impiegare
# Più è alto il numero di sfumature maggiore sarà l'omogeneità della visualizzazione

clg <- colorRampPalette(c("black", "grey", "light grey"))(3) #questa palette di colore che ho scelto di creare è fondamentalmente una palette di colore in bianco e nero

# Con il seguente comando scelgo di plottare i dati/il file caricato con l'associazione di palette di colore proprio quella appena creata

plot(b2, col=clg)

# Per dimostrare quanto scritto sopra a proposito delle sfumature della palette... richiamo il comando aumentando il numero di fumature da 3 a 100, mantenendo il resto delle caratteristiche uguali

clg <- colorRampPalette(c("black", "grey", "light grey"))(100)
plot(b2, col=clg)

# Creo un'altra possibile palette di colori da impiegare, ancora una volta provando a mantenere la distinzione fra 3 e 100 sfumature, il resto dei comandi rimane uguale

clcyan <- colorRampPalette(c("magenta", "cyan4", "cyan"))(3)
plot(b2, col=clcyan)
clcyan <- colorRampPalette(c("magenta", "cyan4", "cyan"))(100)
plot(b2, col=clcyan)

# Creo una nuova Palette di colori, stavolta usando direttamente le 100 sfumature, e d'ora in poi userò sempre questo valore di partenza, poi la plotto
clch <- colorRampPalette(c("magenta", "cyan4", "cyan", "chartreuse"))(100)
plot(b2, col=clch)

# Come si importano altre bande di colore
# Importo la banda b3, le associo l'ultima palette di colore che ho ideato, la plotto

b3 <- im.import("sentinel.dolomites.b3.tif")
plot(b3, col=clch)

# Importo la banda b4, le associo l'ultima palette di colore che ho ideato, la plotto

b4 <- im.import("sentinel.dolomites.b4.tif")
plot(b4, col=clch)

# Importo la banda b8, le associo l'ultima palette di colore che ho ideato, la plotto

b8 <- im.import("sentinel.dolomites.b8.tif")
plot(b8, col=clch)

# Come costruire un multiframe per avere una nuova visualizzazione
# Scrivo una nuova funzione, la funzione "par" per creare una rappresentazione unica di più grafici
# Voglio costruire una rappresentazione con più immagini insieme utilizzando il multiframe
# Il comando di questa funzione si scrive indicando la funzione che voglio usare "par" seguita da una parentesi tonda con all'interno l'indicazione del multiframe che voglio usare seguito dalla funzione c()
contenente all'interno l'indicazione della rappresentazione che voglio fare. I 2 numeri indicano righe e colonne, quindi una rappresentazione "2,2" è una matrice a 4 caselle
# Scrivo il comando nel seguente modo, seguito dalla ripetizione del comando plot per le bande che voglio rappresentare

par(mfrow=c(2,2))
plot(b2)
plot(b3)
plot(b4)
plot(b8)

# Rifaccio la stessa cosa cambiando la Palette di colori impiegata

par(mfrow=c(2,2))
plot(b2, col=clch)
plot(b3, col=clch)
plot(b4, col=clch)
plot(b8, col=clch)

# Esercizio
# Plottare le 4 bande una dopo l'altra in riga (matrice a 1 riga con 4 colonne)

par(mfrow=c(1,4))
plot(b2, col=clch)
plot(b3, col=clch)
plot(b4, col=clch)
plot(b8, col=clch)

# Lavoriamo come le immagini satellitari
# Impieghiamo la funzione di associazione definendo il nuovo oggetto con un nuovo nome, es. stacksent, usando sempre la funzione c()
# Plotto la nuova rappresentazione associata ad una Palette di colori a scelta

stacksent <- c(b2, b3, b4, b8)
plot(stacksent) #, col=clch)

!: Per fare PULIZIA dopo tante rappresentazioni sull'interfaccia grafica impiego il comando/funzione "dev.off()" che mi pulisce l'interfaccia grafica cancellando l'ultima rappresentazione

dev.off()

# Proseguo con una nuova rappresentazione, in questo caso scelgo di rappresentare la quarta immagine, quella corrispondente alla banda NIR, vcino infrarosso.

plot(stacksent[[4]])
plot(stacksent[[4]], col=clch)

# Faccio una nuova rappresentazione impiegando in dettaglio la banda RGB (Rosso, Verde, Blue)
# Scrivo i comandi per la rappresentazione dell'oggetto stacksent con relative corrispondenze alle bande di colore impiegate
# stacksent[[1]] = b2 = blue
# stacksent[[2]] = b3 = green
# stacksent[[3]] = b4 = red
# stacksent[[4]] = b8 = nir

# Plotto in grafico la rappresentazione con queste nuove bande di colore per vedere gli effetti della rappresentazione in particolare con il nir.
# im.plotRGB(stacksent, r=3, g=2, b=1)
# Plotto per provare queste 2 versioni

im.plotRGB(stacksent, 3, 2, 1)
im.plotRGB(stacksent, 4, 2, 1)


# Esercizio: Fare un plot con i colori naturali e le immagini in falsi colori una dopo l'altra, quindi in modalità una riga e 2 colonne

par(mfrow=c(1,2))
im.plotRGB(stacksent, 3, 2, 1)
im.plotRGB(stacksent, 4, 2, 1)

# Ancora una volta faccio pulizia con il comando "dev.off()"

dev.off()

# Faccio un'altra seguente rappresentazione

im.plotRGB(stacksent, 4, 3, 2)

# Proseguo con una rappresentazione in questo a 3 immagini, non più a 2.

par(mfrow=c(1,3))
im.plotRGB(stacksent, 3, 2, 1)
im.plotRGB(stacksent, 4, 2, 1)
im.plotRGB(stacksent, 4, 3, 2)

# Faccio ancora pulizia con lo stesso comando

dev.off()

#Questa volta faccio qualcosa di diverso, utilizziamo le bande di verde e vicino infrarosso (G e nir)

im.plotRGB(stacksent, 3, 4, 2)

# Questa volta faccio qualcosa di diverso, utilizziamo le bande di blu e vicino infrarosso (B e nir)

im.plotRGB(stacksent, 3, 2, 4)

# Esercizio finale: Costruire in fine un multiframe con le 4 immagini tutte unite insieme in uno schema 2x2, matrice 2 righe e 2 colonne

par(mfrow=c(2,2))
im.plotRGB(stacksent, 3, 2, 1) # natural colors
im.plotRGB(stacksent, 4, 2, 1) # nir on red
im.plotRGB(stacksent, 3, 4, 2) # nir on green
im.plotRGB(stacksent, 3, 2, 4) # nir on blue

# Posso ricercare la correlazione delle informazioni per quanto appena fatto
# Faccio questo mediante il comando "pairs(stacksent)"

pairs(stacksent)

# Grafici mostrano correlazione pixel bandaxbanda. Blu e verde molto correlati ad es.
# Abbiamo indice correlazione di Pearson. Va da -1 a +1.
# I valori si abbassano quando si va verso il vicino infrarosso.
# Se digito il nome di un oggetto, es. b2, mi escono tutte le sue informazioni relative








#Visualizzazione in R di dati satellitari da imageRy
#hhtps://

library(terra)
library(imageRy)

#lista dei dati ritrovabili su imageRy
im.list()

#importazione dati
b2<-im.import("sentinel.dolomites.b2.tif")
b3 <- im.import("sentinel.dolomites.b3.tif") 
b4 <- im.import("sentinel.dolomites.b4.tif") 
b8 <- im.import("sentinel.dolomites.b8.tif") 

#multiframe
par(mfrow=c(2,2))
plot(b2)
plot(b3)
plot(b4)
plot(b8)

#creo immagine multispettrale (più spettri di colore)

stacksent<-c(b2,b3,b4,b8)
plot(stacksent)

#posso rifare lo stesso lavoro cambiando la scala di colore

#se volessi plottare solo il quarto elemento dello stack, la banda b8, proseguo con il comando dev.off per cancellare quanto fatto in precedenza

dev.off()

plot(stacksent[[4]])

#come si plottano l evarie bande di colore
#?
#c()

#Plottaggio bande RGB (Rosso, Verde, Blu) o (Red, Green, Blue)

#stacksent[[1]]= b2 = blue
#stacksent[[2]] = b3 = green
#stacksent[[3]] = b4 = red
#stacksent [[4]] = b8 = nir = vicino infra rosso

#composizione RGB diventa composizione 3,2,1

im.plotRGB(stacksent,r=3, g=2, b=1)

im.plotRGB(stacksent,r=4, g=2, b=1)

#es. rappresentare insieme con par le immagini una con colori naturali e una in infrarosso

par(mfrow=c(1,2))
im.plotRGB(stacksent, r=3, g=2, b=1)
im.plotRGB(stacksent, r=4, g=2, b=1)


par(mfrow=c(1,2))
im.plotRGB(stacksent, 4,3,2)


par(mfrow=c(1,3))
im.plotRGB(stacksent, 3,2,1)
im.plotRGB(stacksent, 4,2,1)
im.plotRGB(stacksent, 4,3,2)


#nir su verde
im.plotRGB(stacksent, 3,4,2)

#nir su blu
im.plotRGB(stacksent, 3,2,4)

#mulitiframe finale
#esercizio: fare un multiframe finale

par(mfrow=c(2,2))
im.plotRGB(stacksent, 3,2,1) #colori naturali
im.plotRGB(stacksent, 4,2,1) #nir su rosso
im.plotRGB(stacksent, 3,4,2) #nir su verde
im.plotRGB(stacksent, 3,2,4) #nir su blu

#correlazione per informazioni
pairs(stacksent)

#grafici mostra correlazione pixel bandaxbanda. Bu e verde molto correlati ad es. Abbiamo indice correlazione di Pearson. Va da -1 a +1.
#i valori si abbassano quando si va verso il vicino infrarosso.
b2
#se digito il nome di un oggetto mi escono tutte le sue informazioni relative

# Indici spettrali

Cosa sono gli indici spettrali
Vediamo immagini satellitari come matrice di numeri
Vogliamo ad es. vedere la biomassa, massa biologica di un sistema
Per misurare biomassa possiamo usare le immagini satellitari e calcolare indici relativi
Creiamo indice con bande a disposizione
Banda nir che le piante riflettono molto e l'altro è il rosso e blu. 
Rosso assorbito per inizio avvio fotosintesi per catena elettroni.
Prendiamo ad es. nir e rosso. considero un albero in corrispondenza di ogni banda. Vediamo comportamento riflettanza per pianta. es. 0 - 100.
In nir valori molto alti, es. 90. in rosso poca riflessione, valore basso, es. 10. vogliamo unico nuovo livello che ci informi.
Si fa operazione matematica 90 - 10 = 80 (valore del pixel). Indice come differenza di vegetazione. detto Differce Vegetation Index (DVI).
Cosa succede: Mesofillo fogliare pianta morta crollano. Cambio riflettanza nir. divent ad es. 60. in rosso avrò invece and es. 30. Se faccio differenza in questo caso avrò 30.
Così con il DVI posso far calcoli di biomassa in data area A. si può anche fare col normalizzato NDVI.
Se faccio un grafico dove metto in X le bande e in Y la lunghezza d'onda ottengo in immagine quella che si chiama firma spettrale.
Ho firme diverse fra pianta viva e morta. spazio fra le 2 firme è detta red edge. indica sanità della pianta.
Per calcolo indici si usano maggiormente rosso e nir.

# Richiamo pacchetti terra e imageRy
library (terra)
library (imageRy)

Prima funzione da usare è im.list()

# Lista dei file
im.list ()

# Assegno immagine a oggetto
# Richiamo oggetto

m1992 <- im.import ("matogrosso_l5_1992219_lrg.jpg")
m1992

Abbiamo a disposizione 3 bande: Falso colore.
# Bande
# Banda 1 Nir
# Banda 2 Rosso
# Banda 3 Verde

# Facciamo dei plot

# plotter i dati
im.plotRGB (m1992, r = 1, g = 2, b = 3)

Il rosso indica la foresta pluviale nel 1992
Se metto nir su verde ottengo verde fluo.

# Nuovo plot
im.plotRGB (m1992, 2, 1, 3)

# Il colore rosa indica le zone pre antropizzazione. verde sono zone vegetazione.
# Voglio vedere suolo nudo.

# Se metto nir su blu...
# Nuovo plot/immagine

im.plotRGB (m1992, 2, 3, 1)

# Il giallo evidenzia zone dove uomo ha messo le mani. Anche il fiume appare giallo... come mai?
# Acqua in nir assorbe tutto, in false color diventa nera, perché qua non è così?, c'è molto sedimento, in quel momento.
# Facciamo confronto fra 1992 e 2006

m2006 <- im.import ("matogrosso_ast_2006209_lrg.jpg")
m2006

# Vediamo come sia drasticamente cambiata la situazione.forest distrutta.
# Posso confrontare le immagini con un par.

par(mfrow=c(1,2))
im.plotRGB (m1992, 1,2,3)
im.plotRGB (m2006, 1,2,3)

dev.off() # per pulire 

# nir su verde 
im.plotRGB (m2006, 2,1,3)

# nir ontop blue
im.plotRGB (m2006, 2,3,1)

# Metto tutte le 6 immagini insieme
# Faccio un grande par

par(mfrow=c(2,3))
im.plotRGB (m1992, 1,2,3) # 1992 nir su rosso
im.plotRGB (m1992, 2,1,3) # 1992 nir su verde
im.plotRGB (m1992, 2,3,1) # 1992 nir su blu
im.plotRGB (m2006, 1,2,3) # 2006 nir su rosso
im.plotRGB (m2006, 2,1,3) # 2006 nir su verde
im.plotRGB (m2006, 2,3,1) # 2006 nir su blu

# Posso plottare anche la prima Banda...  nir.
im.plot(m2006[[1]])



# Su NASA visibile earth vediamo le immagini.


04/04/24

Spiegazione gioco numeri per Pasqua...
Si tratta di un gioco linguistico per cui si può proseguire all'infinito giucando sulla descrizione verbale dei numeri.
il primo numero è 3, che si può dire come " un 3, 1 3" ecc...

3
13
1113
3113
132113
1113122113
...

Giorni in cui il Prof sarà assente: 13/04-16/04
Non ci vediamo lunedì 15 e martedì 16

# Calcolo DVI (Difference Vegetation Index)

dvi1992 = m1992[[1]] - m1992[[2]]
# via alternativa di coding: m1992$matogrosso-2219_lrg_1 - m1992$matogrosso-2219_lrg_2
# Noi non usiamo questo metodo, usiamo invece il precedente (senza commento)

#  Formiamo una rampPalette nuova da usare per questo lavoro
cl<-colorRampPalette(c("darkblue", "yellow", "red", "black")) (100)
# Plottiamo 1992
plot(dvi1992, col = cl)
# Plottiamo 2006 e importiamo immagine del 2006 (dvi2006)
m2006 <-im.import("matogrosso_ast_2006209_lrg.jpg")
dvi2006 = m2006[[1]] - m2006[[2]]

# Esercizio: Plottare il dvi1992 affianco a quello del dvi2006
par(mfrow=c(1,2))
plot(dvi1992, col=cl)
plot(dvi2006, col=cl)

# Normalizzazione di un indice.
Come si fa
Prendo immagine a 8 bit, faccio Nir . Red / Nir + Red
255/255 = 1 massimo ndvi
-255/255 = minimo ndvi

Prendo adesso un'immagine a 4 bit.
15/15 = 1
-15/15 = -1

stackdvi<-c(dvi1992, dvi2006)
pirs(stackdvi)

# dvi normalizzato

ndvi1992 = dvi1992 / (m1992[[1]]+m1992[[2]])
ndvi2006 = dvi2006 / (m2006[[1]]+m2006[[2]])

par(mfrow=c(1,2))
plot(ndvi1992, col=cl)
plot(ndvi2006, col=cl)







