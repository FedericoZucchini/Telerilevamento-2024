# Primo script di R
# Utilizziamo R come una calcolatrice 
# Associamo agli oggetti a,b le operazioni di prodotto fra 2 numeri (es.)
# Si usa il simbolo di associazione "<-" per associare un numero o comunque un attributo ad un oggetto, in questo caso lo associamo alle lettere a,b

a <- 6 * 7
b <- 5 * 8

# Chiediamo a R di fare l'operazione di somma degli oggetti a,b

a + b

# R ci restituisce il risultato di somma fra a e b

# Utiliziamo R per produrre degli Arrays
# Creiamo l'oggetto "flowers" a cui attribuiamo, mediante la funzione di comando "concatenate" ["c()"] una serie di valori separati da una virgola
flowers <- c(3, 6, 8, 10, 15, 18)
# Richiamiamo l'oggetto "flowers" che R ci mostrerà nell'output
flowers
# Creiamo un altro oggetto, "insects" a cui attribuiamo allo stesso modo una serie di valori numerici
insects <- c(10, 16, 25, 42, 61, 73)
# Richiamiamo l'oggetto "insects" che R ci mostrerà nell'output
insects

# Chiediamo a R di farci il grafico di questi 2 oggetti, per questo usiamo la funzione "plot"

plot(flowers, insects)

# Cambiamo i parametri di plot 

# Andiamo a cambiare la modalità di visualizzazione dei simboli impiegati nel plot 
# Cambiamo come ci appaiono i pallini con cui vengono rappresentati i dati nel grafico
# A seconda del numero che inseriamo in "pch" cambia la modalità di visualizzazione del punto sul grafico
# Se non metto un numero il pallino compare tondo bianco vuoto, Al numero 19 di pch corrisponde, es., il pallino nero pieno, al 25 corrisponde un triangolino con la base verso l'alto, al 69 una E ecc.
plot(flowers, insects)
plot(flowers, insects, pch=19)
plot(flowers, insects, pch=25)
plot(flowers, insects, pch=69)

# Cambiamo le dimensioni dei simboli con cui vengono visualizzati i dati
# Per far prima consideriamo direttamente la funzione plot con i nseriti i dati che vogliamo visualizzare e aggingiamo la funzione "cex" che cambia la dimensione
# Se a pch associo il numero 2 le dimensioni dei pallini raddoppiano, se metto ad es. .5 dimezzano (posso impiegare il "." per indicare "0,")
plot(flowers, insects, pch=19, cex=2)
plot(flowers, insects, pch=19, cex=.5)

# Cambiamo il colore con cui vengono visualizzati i dati nell'output 
# Posso ad es. andare ad inserire la funzione "col" che ci cambia e dichiara il colore dei dati che sto rappresentando
# Per es. posso inserire "chocolate1" per andare a rappresentare pallini di colore marrone.
# Per vedere i colori a disposizione posso andare in una libreria (verificare il nome della libreria dei colori da usare e seguire)
plot(flowers, insects, pch=19, cex=.5, col="chocolate1") 


# Come installare nuovi pacchetti di R
# Cominciamo installiando il pacchetto "terra" con il seguente comando

install.packages("terra")

# Proseguiamo installando il pacchetto "devtools" con il seguente comando

install.packages("devtools")

# Andiamo a richiamare nella libreria il pacchetto "terra" appena installato con il comando "library ()"

library(terra)

# Posso in alternativa usare anche il comando "require()"
# Richiamo in libreria anche devtools

library(devtools)

# Come installare il pacchetto imageRy da GitHub

# Uso una funzione di devtools:
# Mi occorre usare il comando indicato come segue: install_github("ducciorocchini/imageRy")

install_github("ducciorocchini/imageRy") # Così facendo installo tale pacchetto dal GitHub del prof. Duccio Rocchini 

# Con il comando già visto, "library()" indicando di voler richiamare il pacchetto imageRy, richiamo tale pacchetto

library(imageRy)


# Visualizzare dati satellitari in R da imageRy
# Riportiamo il link di riferimento da cui prendiamo le informazioni che ci servono
# https://sentinels.copernicus.eu/web/sentinel/user-guides/sentinel-2-msi/resolutions/spatial

# Richiamo col comando library i pacchetti terra e imageRy

library(terra)
library(imageRy)

# Richiedo di vedere la lista dei dati disponibili in imageRy impiegando il comando "im.list()"

im.list()

# Come si importano i dati
# Do all'oggetto, es., sentinel.dolomites.b2.tif, il nome di b2 associato alla banda di colore relativa

b2 <- im.import("sentinel.dolomites.b2.tif")

# Come si plottano i dati in questo caso
# Definisco una banda di colori da impiegare per la rappresentazione del film tif che ho scelto di visualizzare
# In questo caso ho scelto un file tif relativo alla catena montuosa dolomitica delle Tofane in Veneto in zona Cortina d'Ampezzo
# Scelgo di definire una banda di colore dandogli un nome esemplificativo, in questo caso scelgo "clg" per brevità
# Utilizzo il comando colorRamPalette insieme a c(), indico anche fuori da questa funzione di associazione, fra altre due parentesi tonde il numero di sfumature che voglio impiegare
# Più è alto il numero di sfumature maggiore sarà l'omogeneità della visualizzazione

clg <- colorRampPalette(c("black", "grey", "light grey"))(3) #questa palette di colore che ho scelto di creare è fondamentalmente una palette di colore in bianco e nero

# Con il seguente comando scelgo di plottare i dati/il file caricato con l'associazione di palette di colore proprio quella appena creata

plot(b2, col=clg)

# Per dimostrare quanto scritto sopra a proposito delle sfumature della palette... richiamo il comando aumentando il numero di fumature da 3 a 100, mantenendo il resto delle caratteristiche uguali

clg <- colorRampPalette(c("black", "grey", "light grey"))(100)
plot(b2, col=clg)

# Creo un'altra possibile palette di colori da impiegare, ancora una volta provando a mantenere la distinzione fra 3 e 100 sfumature, il resto dei comandi rimane uguale

clcyan <- colorRampPalette(c("magenta", "cyan4", "cyan"))(3)
plot(b2, col=clcyan)
clcyan <- colorRampPalette(c("magenta", "cyan4", "cyan"))(100)
plot(b2, col=clcyan)

# Creo una nuova Palette di colori, stavolta usando direttamente le 100 sfumature, e d'ora in poi userò sempre questo valore di partenza, poi la plotto
clch <- colorRampPalette(c("magenta", "cyan4", "cyan", "chartreuse"))(100)
plot(b2, col=clch)

# Come si importano altre bande di colore
# Importo la banda b3, le associo l'ultima palette di colore che ho ideato, la plotto

b3 <- im.import("sentinel.dolomites.b3.tif")
plot(b3, col=clch)

# Importo la banda b4, le associo l'ultima palette di colore che ho ideato, la plotto

b4 <- im.import("sentinel.dolomites.b4.tif")
plot(b4, col=clch)

# Importo la banda b8, le associo l'ultima palette di colore che ho ideato, la plotto

b8 <- im.import("sentinel.dolomites.b8.tif")
plot(b8, col=clch)

# Come costruire un multiframe per avere una nuova visualizzazione
# Scrivo una nuova funzione, la funzione "par" per creare una rappresentazione unica di più grafici
# Voglio costruire una rappresentazione con più immagini insieme utilizzando il multiframe
# Il comando di questa funzione si scrive indicando la funzione che voglio usare "par" seguita da una parentesi tonda con all'interno l'indicazione del multiframe che voglio usare seguito dalla funzione c()
contenente all'interno l'indicazione della rappresentazione che voglio fare. I 2 numeri indicano righe e colonne, quindi una rappresentazione "2,2" è una matrice a 4 caselle
# Scrivo il comando nel seguente modo, seguito dalla ripetizione del comando plot per le bande che voglio rappresentare

par(mfrow=c(2,2))
plot(b2)
plot(b3)
plot(b4)
plot(b8)

# Rifaccio la stessa cosa cambiando la Palette di colori impiegata

par(mfrow=c(2,2))
plot(b2, col=clch)
plot(b3, col=clch)
plot(b4, col=clch)
plot(b8, col=clch)

# Esercizio
# Plottare le 4 bande una dopo l'altra in riga (matrice a 1 riga con 4 colonne)

par(mfrow=c(1,4))
plot(b2, col=clch)
plot(b3, col=clch)
plot(b4, col=clch)
plot(b8, col=clch)

# Lavoriamo come le immagini satellitari
# Impieghiamo la funzione 
stacksent <- c(b2, b3, b4, b8)
plot(stacksent) #, col=clch)

dev.off()
plot(stacksent[[4]])


plot(stacksent[[4]], col=clch)

# RGB plotting
# stacksent[[1]] = b2 = blue
# stacksent[[2]] = b3 = green
# stacksent[[3]] = b4 = red
# stacksent[[4]] = b8 = nir

# im.plotRGB(stacksent, r=3, g=2, b=1)
im.plotRGB(stacksent, 3, 2, 1)
im.plotRGB(stacksent, 4, 2, 1)

# Exercise: make a plot with the natural colour and the false colour images one beside the other
par(mfrow=c(1,2))
im.plotRGB(stacksent, 3, 2, 1)
im.plotRGB(stacksent, 4, 2, 1)

dev.off()
im.plotRGB(stacksent, 4, 3, 2)

par(mfrow=c(1,3))
im.plotRGB(stacksent, 3, 2, 1)
im.plotRGB(stacksent, 4, 2, 1)
im.plotRGB(stacksent, 4, 3, 2)

dev.off()

# nir on green
im.plotRGB(stacksent, 3, 4, 2)

# nir on blue
im.plotRGB(stacksent, 3, 2, 4)

# final multiframe: Exercise: put the four images altogether
par(mfrow=c(2,2))
im.plotRGB(stacksent, 3, 2, 1) # natural colors
im.plotRGB(stacksent, 4, 2, 1) # nir on red
im.plotRGB(stacksent, 3, 4, 2) # nir on green
im.plotRGB(stacksent, 3, 2, 4) # nir on blue

# correlation of information
pairs(stacksent)









#Visualizzazione in R di dati satellitari da imageRy
#hhtps://

library(terra)
library(imageRy)

#lista dei dati ritrovabili su imageRy
im.list()

#importazione dati
b2<-im.import("sentinel.dolomites.b2.tif")
b3 <- im.import("sentinel.dolomites.b3.tif") 
b4 <- im.import("sentinel.dolomites.b4.tif") 
b8 <- im.import("sentinel.dolomites.b8.tif") 

#multiframe
par(mfrow=c(2,2))
plot(b2)
plot(b3)
plot(b4)
plot(b8)

#creo immagine multispettrale (più spettri di colore)

stacksent<-c(b2,b3,b4,b8)
plot(stacksent)

#posso rifare lo stesso lavoro cambiando la scala di colore

#se volessi plottare solo il quarto elemento dello stack, la banda b8, proseguo con il comando dev.off per cancellare quanto fatto in precedenza

dev.off()

plot(stacksent[[4]])

#come si plottano l evarie bande di colore
#?
#c()

#Plottaggio bande RGB (Rosso, Verde, Blu) o (Red, Green, Blue)

#stacksent[[1]]= b2 = blue
#stacksent[[2]] = b3 = green
#stacksent[[3]] = b4 = red
#stacksent [[4]] = b8 = nir = vicino infra rosso

#composizione RGB diventa composizione 3,2,1

im.plotRGB(stacksent,r=3, g=2, b=1)

im.plotRGB(stacksent,r=4, g=2, b=1)

#es. rappresentare insieme con par le immagini una con colori naturali e una in infrarosso

par(mfrow=c(1,2))
im.plotRGB(stacksent, r=3, g=2, b=1)
im.plotRGB(stacksent, r=4, g=2, b=1)


par(mfrow=c(1,2))
im.plotRGB(stacksent, 4,3,2)


par(mfrow=c(1,3))
im.plotRGB(stacksent, 3,2,1)
im.plotRGB(stacksent, 4,2,1)
im.plotRGB(stacksent, 4,3,2)


#nir su verde
im.plotRGB(stacksent, 3,4,2)

#nir su blu
im.plotRGB(stacksent, 3,2,4)

#mulitiframe finale
#esercizio: fare un multiframe finale

par(mfrow=c(2,2))
im.plotRGB(stacksent, 3,2,1) #colori naturali
im.plotRGB(stacksent, 4,2,1) #nir su rosso
im.plotRGB(stacksent, 3,4,2) #nir su verde
im.plotRGB(stacksent, 3,2,4) #nir su blu

#correlazione per informazioni
pairs(stacksent)
#grafici mostra correlazione pixel bandaxbanda. Bu e verde molto correlati ad es. Abbiamo indice correlazione di Pearson. Va da -1 a +1.
#i valori si abbassano quando si va verso il vicino infrarosso.
b2
#se digito il nome di un oggetto mi escono tutte le sue informazioni relative


